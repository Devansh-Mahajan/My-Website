---
// src/components/Giscus.astro
/**
 * Usage:
 * <Giscus repo="owner/name" repoId="â€¦" category="General" categoryId="â€¦" mapping="pathname" />
 */
import { getGiscusConfig, isGiscusConfigured } from '../config/giscus';

// Get Giscus configuration
const config = getGiscusConfig();
const isConfigured = isGiscusConfigured();

// Extract props for the deterministic approach
const {
  repo = config.repo,
  repoId = config.repoId,
  category = config.category,
  categoryId = config.categoryId,
  mapping = config.mapping,
  lang = config.lang,
} = Astro.props;
---

{isConfigured && (
  <section id="comments" class="giscus-section">
    <div id="giscus-container" style="visibility:hidden"></div>
  </section>
)}

{!isConfigured && (
  <div class="giscus-setup-notice">
    <h3>ðŸ’¬ Comments Coming Soon</h3>
    <p>Comments will be available once Giscus is configured. Check the setup instructions in the repository.</p>
  </div>
)}

<script define:vars={{ repo, repoId, category, categoryId, mapping, lang }}>
  (function () {
    // --- THEME RESOLUTION (Astro friendly) ---
    function readTheme() {
      // common patterns:
      // 1) <html class="dark">â€¦</html>
      // 2) <html data-theme="dark">â€¦</html>
      // 3) fall back to OS
      const html = document.documentElement;
      if (html.classList.contains('dark')) return 'dark';
      const attr = html.getAttribute('data-theme');
      if (attr === 'dark' || attr === 'light') return attr;
      return matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    // Avoid duplicate mounts on client navigations
    function alreadyMounted() {
      return !!document.querySelector('iframe.giscus-frame');
    }

    function mountGiscus(theme) {
      const container = document.getElementById('giscus-container');
      if (!container || alreadyMounted()) return;

      const s = document.createElement('script');
      s.src = 'https://giscus.app/client.js';
      s.async = true;
      s.crossOrigin = 'anonymous';

      // REQUIRED CONFIG â€“ fill with your values
      s.setAttribute('data-repo', repo);
      s.setAttribute('data-repo-id', repoId);
      s.setAttribute('data-category', category);
      s.setAttribute('data-category-id', categoryId);

      // Typical options (tweak if needed)
      s.setAttribute('data-mapping', mapping);
      s.setAttribute('data-strict', '0');
      s.setAttribute('data-reactions-enabled', '1');
      s.setAttribute('data-emit-metadata', '0');
      s.setAttribute('data-input-position', 'bottom');
      s.setAttribute('data-lang', lang);

      // CRUCIAL: give Giscus the theme BEFORE it boots
      s.setAttribute('data-theme', theme);

      container.appendChild(s);
    }

    function setGiscusTheme(theme) {
      const iframe = document.querySelector('iframe.giscus-frame');
      if (!iframe || !iframe.contentWindow) return;
      iframe.contentWindow.postMessage(
        { giscus: { setConfig: { theme } } },
        'https://giscus.app'
      );
    }

    // Reveal only after iframe has the correct theme to avoid "flash"
    function revealOnLoad() {
      const container = document.getElementById('giscus-container');
      const observer = new MutationObserver(() => {
        const iframe = document.querySelector('iframe.giscus-frame');
        if (iframe) {
          // small next-tick to allow Giscus to paint
          setTimeout(() => { if (container) container.style.visibility = 'visible'; }, 0);
          observer.disconnect();
        }
      });
      observer.observe(document.body, { subtree: true, childList: true });
    }

    function boot() {
      const theme = readTheme();
      mountGiscus(theme);
      revealOnLoad();

      // Watch for theme toggles: support both class and data-theme
      const html = document.documentElement;
      const mo = new MutationObserver(() => setGiscusTheme(readTheme()));
      mo.observe(html, { attributes: true, attributeFilter: ['class', 'data-theme'] });

      // OS theme changes
      const mql = matchMedia('(prefers-color-scheme: dark)');
      const onChange = () => setGiscusTheme(readTheme());
      mql.addEventListener ? mql.addEventListener('change', onChange) : mql.addListener(onChange);

      // Astro client navigations (View Transitions / SPA-ish islands)
      // When a new page loads, if comments exist and not mounted, mount with current theme.
      window.addEventListener('astro:page-load', () => {
        if (document.getElementById('giscus-container') && !alreadyMounted()) {
          mountGiscus(readTheme());
        }
      });
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', boot, { once: true });
    } else {
      boot();
    }
  })();
</script>

<style>
  .giscus-section { 
    margin-top: 2rem; 
  }

  /* Setup notice styling */
  .giscus-setup-notice {
    margin-top: 3rem;
    padding: 2rem;
    text-align: center;
    background: rgba(var(--gray-light), 0.3);
    border-radius: 0.75rem;
    border: 1px solid rgba(var(--gray), 0.2);
  }

  .giscus-setup-notice h3 {
    margin: 0 0 0.5rem 0;
    color: rgb(var(--accent));
    font-size: 1.25rem;
  }

  .giscus-setup-notice p {
    margin: 0;
    color: rgb(var(--gray));
    font-size: 0.95rem;
  }

  /* Dark mode for setup notice */
  [data-theme='dark'] .giscus-setup-notice {
    background: rgba(var(--gray-light), 0.1);
    border-color: rgba(var(--gray), 0.3);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .giscus-section {
      margin-top: 2rem;
    }
    
    .giscus-setup-notice {
      margin-top: 2rem;
      padding: 1.5rem;
    }
  }
</style>