---
import { getGiscusConfig, isGiscusConfigured } from '../config/giscus';

// Get Giscus configuration
const config = getGiscusConfig();
const isConfigured = isGiscusConfigured();
---

	{isConfigured && (
		<div id="giscus-comments" class="giscus-container">
			<!-- Giscus will be loaded dynamically after theme is established -->
		</div>
	)}

	{!isConfigured && (
		<div class="giscus-setup-notice">
			<h3>ðŸ’¬ Comments Coming Soon</h3>
			<p>Comments will be available once Giscus is configured. Check the setup instructions in the repository.</p>
		</div>
	)}

	<!-- Theme-aware Giscus loading script -->
	<script>
		// Giscus configuration
		const giscusConfig = {
			repo: "{config.repo}",
			repoId: "{config.repoId}",
			category: "{config.category}",
			categoryId: "{config.categoryId}",
			mapping: "{config.mapping}",
			strict: "{config.strict}",
			reactionsEnabled: "{config.reactionsEnabled}",
			emitMetadata: "{config.emitMetadata}",
			inputPosition: "{config.inputPosition}",
			lang: "{config.lang}"
		};

		// Function to get current theme
		function getCurrentTheme() {
			const htmlElement = document.documentElement;
			const theme = htmlElement.getAttribute('data-theme');
			return theme === 'dark' ? 'dark' : 'light';
		}

		// Function to update Giscus theme
		function updateGiscusTheme(theme) {
			const giscusFrame = document.querySelector('iframe[src*="giscus.app"]');
			if (giscusFrame) {
				// Send theme change message to Giscus iframe
				giscusFrame.contentWindow.postMessage({
					giscus: {
						setConfig: {
							theme: theme
						}
					}
				}, 'https://giscus.app');
			}
		}

		// Function to handle theme changes
		function handleThemeChange() {
			const currentTheme = getCurrentTheme();
			updateGiscusTheme(currentTheme);
		}

		// Function to dynamically load Giscus with correct theme
		function loadGiscusWithTheme() {
			const container = document.getElementById('giscus-comments');
			if (!container) return;

			const currentTheme = getCurrentTheme();
			
			// Create Giscus script element
			const script = document.createElement('script');
			script.src = 'https://giscus.app/client.js';
			script.setAttribute('data-repo', giscusConfig.repo);
			script.setAttribute('data-repo-id', giscusConfig.repoId);
			script.setAttribute('data-category', giscusConfig.category);
			script.setAttribute('data-category-id', giscusConfig.categoryId);
			script.setAttribute('data-mapping', giscusConfig.mapping);
			script.setAttribute('data-strict', giscusConfig.strict);
			script.setAttribute('data-reactions-enabled', giscusConfig.reactionsEnabled);
			script.setAttribute('data-emit-metadata', giscusConfig.emitMetadata);
			script.setAttribute('data-input-position', giscusConfig.inputPosition);
			script.setAttribute('data-theme', currentTheme);
			script.setAttribute('data-lang', giscusConfig.lang);
			script.setAttribute('data-loading', 'lazy');
			script.crossOrigin = 'anonymous';
			script.async = true;

			// Add script to container
			container.appendChild(script);
		}

		// Function to wait for theme to be established
		function waitForThemeAndLoadGiscus() {
			// Check if theme is already established
			let attempts = 0;
			const maxAttempts = 20; // 1 second max wait
			
			const checkTheme = setInterval(() => {
				attempts++;
				const theme = getCurrentTheme();
				
				// If we have a theme or we've waited long enough, proceed
				if (theme || attempts >= maxAttempts) {
					clearInterval(checkTheme);
					loadGiscusWithTheme();
				}
			}, 50);
		}

		// Listen for theme changes via data-theme attribute changes
		const observer = new MutationObserver(function(mutations) {
			mutations.forEach(function(mutation) {
				if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
					handleThemeChange();
				}
			});
		});

		// Start observing the document element for theme changes
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ['data-theme']
		});

		// Also listen for theme toggle clicks as a backup
		document.addEventListener('click', function(event) {
			if (event.target.closest('#theme-toggle')) {
				// Small delay to allow theme change to complete
				setTimeout(handleThemeChange, 100);
			}
		});

		// Initialize Giscus after theme is established
		document.addEventListener('DOMContentLoaded', function() {
			// Wait a bit for theme initialization to complete
			setTimeout(waitForThemeAndLoadGiscus, 100);
		});

		// Listen for Giscus ready event as additional safety
		window.addEventListener('message', function(event) {
			if (event.origin !== 'https://giscus.app') return;
			
			if (event.data && event.data.type === 'ready') {
				// Giscus is ready, ensure correct theme
				handleThemeChange();
			}
		});
	</script>

<style>
	.giscus-container {
		margin-top: 3rem;
		padding-top: 2rem;
		border-top: 1px solid rgba(var(--gray), 0.2);
	}

	/* Dark mode support for Giscus */
	[data-theme='dark'] .giscus-container {
		border-top-color: rgba(var(--gray), 0.3);
	}

	/* Ensure proper spacing */
	.giscus-container :global(.giscus) {
		margin: 0;
	}

	/* Custom styling to match your site's theme */
	.giscus-container :global(.giscus-frame) {
		border-radius: 0.75rem;
		overflow: hidden;
	}

	/* Setup notice styling */
	.giscus-setup-notice {
		margin-top: 3rem;
		padding: 2rem;
		text-align: center;
		background: rgba(var(--gray-light), 0.3);
		border-radius: 0.75rem;
		border: 1px solid rgba(var(--gray), 0.2);
	}

	.giscus-setup-notice h3 {
		margin: 0 0 0.5rem 0;
		color: rgb(var(--accent));
		font-size: 1.25rem;
	}

	.giscus-setup-notice p {
		margin: 0;
		color: rgb(var(--gray));
		font-size: 0.95rem;
	}

	/* Dark mode for setup notice */
	[data-theme='dark'] .giscus-setup-notice {
		background: rgba(var(--gray-light), 0.1);
		border-color: rgba(var(--gray), 0.3);
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.giscus-container {
			margin-top: 2rem;
			padding-top: 1.5rem;
		}
		
		.giscus-setup-notice {
			margin-top: 2rem;
			padding: 1.5rem;
		}
	}
</style>
