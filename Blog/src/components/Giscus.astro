---
import { getGiscusConfig, isGiscusConfigured } from '../config/giscus';

// Get Giscus configuration
const config = getGiscusConfig();
const isConfigured = isGiscusConfigured();
---

	{isConfigured && (
		<div id="giscus-comments" class="giscus-container">
			<script 
				src="https://giscus.app/client.js"
				data-repo={config.repo}
				data-repo-id={config.repoId}
				data-category={config.category}
				data-category-id={config.categoryId}
				data-mapping={config.mapping}
				data-strict={config.strict}
				data-reactions-enabled={config.reactionsEnabled}
				data-emit-metadata={config.emitMetadata}
				data-input-position={config.inputPosition}
				data-theme="preferred_color_scheme"
				data-lang={config.lang}
				data-loading="lazy"
				crossorigin="anonymous"
				async>
			</script>
		</div>
	)}

	{!isConfigured && (
		<div class="giscus-setup-notice">
			<h3>ðŸ’¬ Comments Coming Soon</h3>
			<p>Comments will be available once Giscus is configured. Check the setup instructions in the repository.</p>
		</div>
	)}

	<!-- Universal theme synchronization script - works in both blog and Quartz environments -->
	<script>
		// Environment detection
		function detectEnvironment() {
			// Check if we're in Quartz environment
			if (document.querySelector('meta[name="generator"][content*="Quartz"]') || 
				window.location.hostname.includes('quartz') ||
				document.querySelector('.dark') !== null) {
				return 'quartz';
			}
			// Check if we're in blog environment
			if (document.querySelector('meta[name="generator"][content*="Astro"]') ||
				document.documentElement.hasAttribute('data-theme')) {
				return 'blog';
			}
			// Default to blog environment
			return 'blog';
		}

		// Universal theme detection function
		function getCurrentTheme() {
			const environment = detectEnvironment();
			
			if (environment === 'quartz') {
				// Quartz theme detection
				const darkElement = document.querySelector('.dark');
				const lightElement = document.querySelector('.light');
				
				if (darkElement) return 'dark';
				if (lightElement) return 'light';
				
				// Fallback: check for dark class on html or body
				if (document.documentElement.classList.contains('dark') || 
					document.body.classList.contains('dark')) {
					return 'dark';
				}
				
				return 'light';
			} else {
				// Blog theme detection
				const htmlElement = document.documentElement;
				const theme = htmlElement.getAttribute('data-theme');
				return theme === 'dark' ? 'dark' : 'light';
			}
		}

		// Function to update Giscus theme
		function updateGiscusTheme(theme) {
			const giscusFrame = document.querySelector('iframe[src*="giscus.app"]');
			if (giscusFrame) {
				// Send theme change message to Giscus iframe
				giscusFrame.contentWindow.postMessage({
					giscus: {
						setConfig: {
							theme: theme
						}
					}
				}, 'https://giscus.app');
			}
		}

		// Function to handle theme changes
		function handleThemeChange() {
			const currentTheme = getCurrentTheme();
			updateGiscusTheme(currentTheme);
		}

		// Universal theme change detection
		function setupThemeObserver() {
			const environment = detectEnvironment();
			
			if (environment === 'quartz') {
				// Quartz theme change detection
				const observer = new MutationObserver(function(mutations) {
					let themeChanged = false;
					mutations.forEach(function(mutation) {
						if (mutation.type === 'attributes' && 
							(mutation.attributeName === 'class' || mutation.attributeName === 'data-theme')) {
							themeChanged = true;
						}
						if (mutation.type === 'childList') {
							// Check for added/removed dark/light elements
							mutation.addedNodes.forEach(node => {
								if (node.nodeType === 1 && (node.classList.contains('dark') || node.classList.contains('light'))) {
									themeChanged = true;
								}
							});
							mutation.removedNodes.forEach(node => {
								if (node.nodeType === 1 && (node.classList.contains('dark') || node.classList.contains('light'))) {
									themeChanged = true;
								}
							});
						}
					});
					if (themeChanged) {
						setTimeout(handleThemeChange, 100);
					}
				});

				// Observe html and body elements for theme changes
				observer.observe(document.documentElement, {
					attributes: true,
					attributeFilter: ['class', 'data-theme']
				});
				observer.observe(document.body, {
					attributes: true,
					attributeFilter: ['class'],
					childList: true,
					subtree: true
				});
			} else {
				// Blog theme change detection
				const observer = new MutationObserver(function(mutations) {
					mutations.forEach(function(mutation) {
						if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
							handleThemeChange();
						}
					});
				});

				observer.observe(document.documentElement, {
					attributes: true,
					attributeFilter: ['data-theme']
				});

				// Also listen for theme toggle clicks as a backup
				document.addEventListener('click', function(event) {
					if (event.target.closest('#theme-toggle')) {
						setTimeout(handleThemeChange, 100);
					}
				});
			}
		}

		// Function to ensure Giscus theme is set after it loads
		function ensureGiscusTheme() {
			let attempts = 0;
			const maxAttempts = 50; // 5 seconds max wait
			
			const checkGiscus = setInterval(() => {
				attempts++;
				const giscusFrame = document.querySelector('iframe[src*="giscus.app"]');
				
				if (giscusFrame || attempts >= maxAttempts) {
					clearInterval(checkGiscus);
					if (giscusFrame) {
						// Giscus is loaded, set the correct theme
						handleThemeChange();
					}
				}
			}, 100);
		}

		// Initialize everything
		function initializeGiscusTheme() {
			// Set up theme change detection
			setupThemeObserver();
			
			// Wait a bit longer for page to settle, then apply theme
			setTimeout(ensureGiscusTheme, 1000);
		}

		// Initialize on DOM ready
		document.addEventListener('DOMContentLoaded', initializeGiscusTheme);

		// Listen for Giscus ready event as additional safety
		window.addEventListener('message', function(event) {
			if (event.origin !== 'https://giscus.app') return;
			
			if (event.data && event.data.type === 'ready') {
				// Giscus is ready, set the initial theme
				handleThemeChange();
			}
		});

		// Additional safety: check theme periodically for first few seconds
		let safetyChecks = 0;
		const safetyInterval = setInterval(() => {
			safetyChecks++;
			handleThemeChange();
			if (safetyChecks >= 10) { // Check for 10 seconds
				clearInterval(safetyInterval);
			}
		}, 1000);
	</script>

<style>
	.giscus-container {
		margin-top: 3rem;
		padding-top: 2rem;
		border-top: 1px solid rgba(var(--gray), 0.2);
	}

	/* Dark mode support for Giscus */
	[data-theme='dark'] .giscus-container {
		border-top-color: rgba(var(--gray), 0.3);
	}

	/* Ensure proper spacing */
	.giscus-container :global(.giscus) {
		margin: 0;
	}

	/* Custom styling to match your site's theme */
	.giscus-container :global(.giscus-frame) {
		border-radius: 0.75rem;
		overflow: hidden;
	}

	/* Setup notice styling */
	.giscus-setup-notice {
		margin-top: 3rem;
		padding: 2rem;
		text-align: center;
		background: rgba(var(--gray-light), 0.3);
		border-radius: 0.75rem;
		border: 1px solid rgba(var(--gray), 0.2);
	}

	.giscus-setup-notice h3 {
		margin: 0 0 0.5rem 0;
		color: rgb(var(--accent));
		font-size: 1.25rem;
	}

	.giscus-setup-notice p {
		margin: 0;
		color: rgb(var(--gray));
		font-size: 0.95rem;
	}

	/* Dark mode for setup notice */
	[data-theme='dark'] .giscus-setup-notice {
		background: rgba(var(--gray-light), 0.1);
		border-color: rgba(var(--gray), 0.3);
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.giscus-container {
			margin-top: 2rem;
			padding-top: 1.5rem;
		}
		
		.giscus-setup-notice {
			margin-top: 2rem;
			padding: 1.5rem;
		}
	}
</style>
