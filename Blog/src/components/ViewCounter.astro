---
import { getGoogleAnalyticsPageViews } from '../utils/analytics';

interface Props {
        slug: string;
}

const { slug } = Astro.props;
const normalizedSlug = slug
        .split('/')
        .map((segment) => segment.trim())
        .filter(Boolean)
        .join('/');

const ensureLeadingSlash = (value: string) => (value.startsWith('/') ? value : `/${value}`);
const withoutTrailingSlash = (value: string) => (value === '/' ? value : value.replace(/\/+$/, ''));
const withTrailingSlash = (value: string) => {
        if (value === '/') return value;
        const base = withoutTrailingSlash(value);
        return `${base}/`;
};

const canonicalPath = normalizedSlug ? ensureLeadingSlash(normalizedSlug) : '/';

const pathCandidates = normalizedSlug
        ? Array.from(
                  new Set(
                          [
                                  withTrailingSlash(canonicalPath),
                                  withoutTrailingSlash(canonicalPath),
                                  withTrailingSlash(canonicalPath).toLowerCase(),
                                  withoutTrailingSlash(canonicalPath).toLowerCase(),
                          ].filter(Boolean),
                  ),
          )
        : ['/'];

const pagePath = pathCandidates[0] ?? '/';
const storageKey = normalizedSlug
        ? `view-counter:google-analytics:${normalizedSlug}`
        : 'view-counter:google-analytics:root';

let initialCount: number | null = null;

if (normalizedSlug && pathCandidates.length > 0) {
        try {
                initialCount = await getGoogleAnalyticsPageViews(pathCandidates);
        } catch (error) {
                console.error(`Unable to resolve Google Analytics views for ${pagePath}`, error);
                initialCount = null;
        }
}
---

<style>
        .view-counter {
                display: inline-flex;
                align-items: center;
                gap: 0.35rem;
                font-size: 0.95rem;
                color: rgb(var(--gray));
        }

        .view-counter svg {
                width: 1rem;
                height: 1rem;
        }

        .view-counter .view-count {
                font-variant-numeric: tabular-nums;
                font-weight: 600;
                color: rgb(var(--gray-dark));
        }

        [data-theme='dark'] .view-counter {
                color: rgba(var(--gray-light), 0.85);
        }

        [data-theme='dark'] .view-counter .view-count {
                color: rgba(var(--gray-light), 0.95);
        }
</style>

<div
        class="view-counter"
        data-page-path={pagePath}
        data-storage-key={storageKey}
        data-initial-count={typeof initialCount === 'number' ? initialCount : ''}
>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12c0 0 3.75-6.75 9.75-6.75S21.75 12 21.75 12s-3.75 6.75-9.75 6.75S2.25 12 2.25 12z" />
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5z" />
        </svg>
        <span class="view-count" aria-live="polite">
                {typeof initialCount === 'number' ? initialCount.toLocaleString() : '--'}
        </span>
        <span class="view-label">views</span>
</div>

<script>
        const container = document.currentScript?.previousElementSibling;

        if (!container) {
                console.warn('View counter container missing');
        } else {
                const countElement = container.querySelector('.view-count');
                const storageKey = container.getAttribute('data-storage-key') ?? '';
                const initialCountAttr = container.getAttribute('data-initial-count');

                const parseCount = (value) => {
                        if (!value) return null;
                        const parsed = Number.parseInt(value, 10);
                        return Number.isNaN(parsed) ? null : parsed;
                };

                const setCountText = (count) => {
                        if (!countElement) return;
                        if (count === null) {
                                countElement.textContent = 'â€”';
                                return;
                        }
                        countElement.textContent = count.toLocaleString();
                };

                const readFromStorage = () => {
                        if (!storageKey || typeof window === 'undefined') return null;
                        try {
                                const cached = window.localStorage.getItem(storageKey);
                                return parseCount(cached);
                        } catch (error) {
                                console.warn('View counter storage unavailable:', error);
                                return null;
                        }
                };

                let resolvedCount = parseCount(initialCountAttr);

                if (resolvedCount === null) {
                        resolvedCount = readFromStorage();
                }

                setCountText(resolvedCount);

                if (resolvedCount !== null && storageKey && typeof window !== 'undefined') {
                        try {
                                window.localStorage.setItem(storageKey, String(resolvedCount));
                        } catch (error) {
                                console.warn('View counter storage unavailable:', error);
                        }
                }

                if (typeof window !== 'undefined' && storageKey) {
                        document.addEventListener('astro:page-load', () => {
                                const cached = readFromStorage();
                                if (cached !== null) {
                                        resolvedCount = cached;
                                        setCountText(resolvedCount);
                                }
                        });
                }
        }
</script>
