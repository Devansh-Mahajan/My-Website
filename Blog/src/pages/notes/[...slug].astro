---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import NotesLayout from '../../layouts/NotesLayout.astro';

export async function getStaticPaths() {
    const notes = await getCollection('notes');
    return notes.map((note) => {
        const slug = note.data.slug || note.id.replace(/\.[^/.]+$/, '');
        return {
            params: { slug },
            props: note,
        };
    });
}

type Props = CollectionEntry<'notes'>;

const note: Props = Astro.props as Props;
const computedTitle = note.data.title || note.id.split('/').pop()?.replace(/-/g, ' ').replace(/_/g, ' ') || 'Note';
const computedDescription = note.data.description || 'Study note';
const { Content } = await render(note);
---

<NotesLayout title={computedTitle} description={computedDescription} currentPath={note.id.replace(/\.[^/.]+$/, '')}>
    <Content />
    <hr />
    <section>
        <h3>Backlinks</h3>
        <div id="backlinks"></div>
    </section>
</NotesLayout>

<script>
    const container = document.getElementById('backlinks');
    fetch('/notes-backlinks.json').then(r => r.ok ? r.json() : {}).then(map => {
        const key = window.location.pathname.replace(/^\/notes\//, '').replace(/\/$/, '');
        const items = map[key] || [];
        if (!items.length) { container.textContent = 'No backlinks yet.'; return; }
        container.innerHTML = items.map(i => `<div><a class="link" href="/notes/${i.path}">${i.title || i.path}</a></div>`).join('');
    }).catch(() => { container.textContent = 'No backlinks.'; });
</script>

